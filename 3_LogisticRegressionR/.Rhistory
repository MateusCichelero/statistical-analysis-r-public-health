getwd()
g <- read.csv("final-diabetes-data-for-R-_csv_-_2_.csv",header=TRUE, sep=',')
dim(g)
colnames()
colnames(g)
dimnames(g)[[2]]
chol <- g["chol"] # cholesterol is continuous, so it’s easy
gender <- as.factor(g[,"gender"]) # but gender isn’t.
dm <- as.factor(g[,"dm"]) # neither is dm
# visualizando genero
t <- table(gender) # store the tabulation for further manipulation
addmargins(t) # this will sum up the gender totals to give an overall total and print the results
round(prop.table(t),digits=3) # get proportions rounded to 3dp
round(100*prop.table(t),digits=1) # get %s rounded to 1dp
# para considerar missing values
dm2 <- factor(dm, exclude=NULL) # make new factor from the old one
table(dm2) # display the counts including the missings (NAs)
# para variaveis continuas, usamos summary(x)
summary(chol)
height <- g[,'height']
weight <- g[,'weight']
summary(height)
summary(weight)
# calculando imc
height.si <- height*0.0254
weight.si <- weight*0.453592
bmi <- weight.si/height.si^2
summary(bmi)
# categorizando variáveis contínuas
# imc underweight [<18.5], normal [18.5-25], overweight [>25] and obese [>30]
bmi_categorised <- ifelse(bmi < 18.5, "underweight",
ifelse(bmi >= 18.5 & bmi <= 25, "normal",
ifelse(bmi > 25 & bmi <= 30, "overweight",
ifelse(bmi > 30, "obese", NA))))
# check that the bmi_categorised variable has worked
table(bmi_categorised, exclude = NULL)
96/1.73^2
# tabela cruzada: obesidade vs diabetes
# frequencies of diabetes by BMI category
dm_by_bmi_category <- table(bmi_categorised, dm2, exclude = NULL)
# check
dm_by_bmi_category
# with the row percentages
round(100 * prop.table(dm_by_bmi_category, margin = 1), digits = 1)
# --- teste
# age group
age <- g['age']
summary(age)
# --- teste
# age group
age <- g[,'age']
summary(age)
age_groups <- ifelse(age < 45, "under 45",
ifelse(age >= 45 & age <= 64, "45-64",
ifelse(age > 64 & age <= 74, "65-74",
ifelse(age > 75, "75 or over", NA))))
table(age_groups, exclude = NULL)
table(age_groups)
, exclude = NULL
table(age_groups, exclude = NULL)
gender_by_age_groups <- table(age_groups, gender, exclude = NULL)
gender_by_age_groups
#Now enter the percentage of all patients who are male and aged 65-74 in this box,
#rounded to the nearest whole percentage:
round(100 * prop.table(gender_by_age_groups, margin = 1), digits = 0)
#Now enter the percentage of all patients who are male and aged 65-74 in this box,
#rounded to the nearest whole percentage:
round(100 * prop.table(gender_by_age_groups, margin = 2), digits = 0)
#Now enter the percentage of all patients who are male and aged 65-74 in this box,
#rounded to the nearest whole percentage:
round(100 * prop.table(gender_by_age_groups, margin = 0), digits = 0)
#Now enter the percentage of all patients who are male and aged 65-74 in this box,
#rounded to the nearest whole percentage:
round(100 * prop.table(gender_by_age_groups, margin = NULL), digits = 0)
# optional extra check for the extra cautious!
head(cbind(age_groups, age))
table(dm2, exclude=NULL)
table(dm, exclude=NULL)
glm(dm ~ 1, family=binomial (link=logit))
m <- glm(dm ~ 1, family=binomial (link=logit))
summary(m)
table(m$y)
# ONE PREDICTOR: GENDER
m <- glm(dm ~ gender, family=binomial (link=logit))
summary(m)
#CONTINUOUS: AGE
m <- glm(dm ~ age, family=binomial (link=logit))
summary(m)
# create a cross tabulation of age and diabetes status
dm_by_age <- table(age, dm)
# output the frequencies of diabetes status by age
freq_table <- prop.table(dm_by_age, margin = 1)
# calculate the odds of having diabetes
odds <- freq_table[, "yes"]/freq_table[, "no"]
# calculate the log odds
logodds <- log(odds)
# plot the ages found in the sample against the log odds of having diabetes
plot(rownames(freq_table), logodds)
# Here, there’s just one coefficient: the intercept. R prints out all the
# coefficients on the scale on which the algorithm did its magic, i.e. the
# log scale in the case of logistic regression as we are modelling the log
# odds of having diabetes. With this rather unexciting null model, we are
# saying that the log odds of having diabetes is -1.7047 and that it’s the
# same for every patient. What does that mean? To interpret this, we first
# need to exponentiate it to get the odds of having diabetes. To do this,
# type:
exp(-1.7047)
# …and you’ll get 0.182 to three decimal places. If you prefer to work in
# probabilities rather than odds, you can use the relation between odds and
# probability that we established earlier to convert. So, just divide the
# odds by 1 plus the odds, to give 0.182/1.182 = 0.15, or 15%. How do these
# compare with the raw data? If you type…
table(dm)
contrasts(gender)
# female é usado como referencia, se quiser mudar isso, basta:
gender <- relevel(gender, ref = "male")
#CONTINUOUS: AGE
m <- glm(dm ~ age, family=binomial (link=logit))
levels(gender)
# ONE PREDICTOR: GENDER
#log odds of having diabetes differs by gender alone
m <- glm(dm ~ gender, family=binomial (link=logit))
summary(m)
m$coefficients
exp(m$coefficients)
exp(m$coefficients)/(1+exp(m$coefficients))
#CONTINUOUS: AGE
m <- glm(dm ~ age, family=binomial (link=logit))
summary(m)
m$coefficients #log odds ratios
exp(m$coefficients) #odds ratios
exp(m$coefficients)/(1+exp(m$coefficients)) #%
location <-<- as.factor(g[,"location"])
location <- as.factor(g[,"location"])
table(location, exclude = NULL)
dm_by_location <-table(location, dm, exclude = NULL)
round(100 * prop.table(dm_by_location, margin = 1), digits = 1)
dm_by_location <-table(location, dm)
round(100 * prop.table(dm_by_location, margin = 1), digits = 1)
#Now fit a logistic regression with “location” as the predictor variable.
# What are the log odds of having diabetes being from Louisa compared with Buckingham?
#   Give the answer (the log odds ratio) to two decimal places.
levels(location)
m <- glm(dm ~ location,family=binomial(link=logit))
summary(m)
m$coefficients #log odds ratios
exp(m$coefficients) #odds ratios
exp(m$coefficients)/(1+exp(m$coefficients)) #%
summary(m)
hist(age)
hist(age)
# ---------------- Multiple Regression
hist(age)
# ---------------- Multiple Regression
hist(age)
d <- density(age)
plot(d,main = "") # gives warnings but the “main” argument suppresses the ugly default title
# ---------------- Multiple Regression
hist(age, breaks = 5)
# ---------------- Multiple Regression
hist(age, breaks = 20)
# ---------------- Multiple Regression
hist(age, breaks = 20)
# ---------------- Multiple Regression
hist(age, breaks = 20)
d <- density(age)
plot(d,main = "") # gives warnings but the “main” argument suppresses the ugly default title
hist(gender)
table(gender)
prop.table(gender)
round(prop.table(gender),digits=3)
table(gender)
# visualizando genero
t <- table(gender) # store the tabulation for further manipulation
addmargins(t) # this will sum up the gender totals to give an overall total and print the results
round(prop.table(t),digits=3) # get proportions rounded to 3dp
# lista nome colunas
colnames(g)
summary(chol)
d <- density(chol)
plot(d,main = "") # gives warnings but the “main” argument suppresses the ugly default title
plot(d,main = "") # gives warnings but the “main” argument suppresses the ugly default title
d <- density(age)
plot(d,main = "") # gives warnings but the “main” argument suppresses the ugly default title
# ---------------- Multiple Regression
hist(age, breaks = 20)
summary(chol)
d <- density(chol)
typeof(chol)
summary(,chol)
# lidar com valores faltantes antes de aplicar densidade
chol.no.na <- chol[is.na(chol)==0]
d <- density(chol.no.na)
plot(d,main = "")
hdl <- g["hdl"]
summary(hdl)
hdl.no.na <- hdl[is.na(hdl)==0]
d <- density(hdl.no.na)
plot(d,main = "")
summary(bmi)
bmi.no.na <- bmi[is.na(bmi)==0]
d <- density(bmi.no.na)
plot(d,main = "")
### AGE
# define the age variable (continuous)
age <- age <- g[,"age"]
# create a cross tabulation of age and diabetes status
dm_by_age <- table(age, dm) # not including NA values because there aren't that many
# output the frequencies of diabetes status by age
dm_by_age_prop <- prop.table(dm_by_age, margin = 1)
# calculate the odds of having diabetes
odds_age <- dm_by_age_prop[, "yes"]/dm_by_age_prop[, "no"]
# calculate the log odds
logodds_age <- log(odds_age)
# plot the ages found in the sample against the log odds of having diabetes
plot(rownames(dm_by_age_prop), logodds_age)
## IDADE AGRUPANDO
# age grouping converting continuous variable to a categorical (ordinal) one
age_grouped <- ifelse(age < 45, "under 45",
ifelse(age >= 45 & age < 65, "45 - 64",
ifelse(age >= 65 & age < 75, "65 - 74",
ifelse(age >= 75, "75 or over", NA))))
age_grouped <- factor(age_grouped, levels = c("under 45", "45 - 64", "65 - 74", "75 or over"))
# create a cross tabulation of age and diabetes status
dm_by_age_grouped <- table(age_grouped, dm)
# output the frequencies of diabetes status by age
age_grouped_prop <- prop.table(dm_by_age_grouped, margin = 1)
# calculate the odds of having diabetes
odds_age_grouped <- age_grouped_prop[, "yes"]/age_grouped_prop[, "no"]
# calculate the log odds
logodds_age_grouped <- log(odds_age_grouped)
# plot the age groups found in the sample against the log odds of having diabetes
dotchart(logodds_age_grouped)
# create a cross tabulation of cholesterol and diabetes status
dm_by_chol <- table(chol, dm) # not including NA values because there aren't that many
# output the frequencies of diabetes status by cholesterol
dm_by_chol_prop <- prop.table(dm_by_chol, margin = 1)
# calculate the odds of having diabetes
odds_chol <- dm_by_chol_prop[, "yes"]/dm_by_chol_prop[, "no"]
# calculate the log odds
logodds_chol <- log(odds_chol)
# plot the cholesterol found in the sample against the log odds of having diabetes
plot(rownames(dm_by_chol_prop), logodds_chol, xlim=c(150, 300))
# output the frequencies of diabetes status by cholesterol
dm_by_chol_prop <- prop.table(dm_by_chol, margin = 1)
###### COLESTEROL
# define chol as a continuous variable
chol <- g[,"chol"]
# create a cross tabulation of cholesterol and diabetes status
dm_by_chol <- table(chol, dm) # not including NA values because there aren't that many
# output the frequencies of diabetes status by cholesterol
dm_by_chol_prop <- prop.table(dm_by_chol, margin = 1)
# calculate the odds of having diabetes
odds_chol <- dm_by_chol_prop[, "yes"]/dm_by_chol_prop[, "no"]
# calculate the log odds
logodds_chol <- log(odds_chol)
# plot the cholesterol found in the sample against the log odds of having diabetes
plot(rownames(dm_by_chol_prop), logodds_chol, xlim=c(150, 300))
# create a cross tabulation of cholesterol and diabetes status
dm_by_chol_categorised <- table(chol_categorised, dm) # not including NA values because there aren't that many
# output the frequencies of diabetes status by cholesterol
dm_by_chol_categorised_prop <- prop.table(dm_by_chol_categorised, margin = 1)
# calculate the odds of having diabetes
odds_chol_categorised <- dm_by_chol_categorised_prop[, "yes"]/dm_by_chol_categorised_prop[, "no"]
# calculate the log odds
logodds_chol_categorised <- log(odds_chol_categorised)
# plot the cholesterol categories found in the sample against the log odds of having diabetes
dotchart(logodds_chol_categorised)
# create a cross tabulation of cholesterol and diabetes status
dm_by_chol_categorised <- table(chol_categorised, dm) # not including NA values because there aren't that many
# https://www.medicalnewstoday.com/articles/315900.php
chol_categorised <- ifelse(chol < 200, "healthy",
ifelse(chol < 240, "borderline high",
ifelse(chol >= 240, "high", NA)))
# make sure that it is treated as a factor/categorical variable and ordering the levels within the factor for the table
chol_categorised <- factor(chol_categorised, levels = c("healthy", "borderline high", "high"))
# create a cross tabulation of cholesterol and diabetes status
dm_by_chol_categorised <- table(chol_categorised, dm) # not including NA values because there aren't that many
# output the frequencies of diabetes status by cholesterol
dm_by_chol_categorised_prop <- prop.table(dm_by_chol_categorised, margin = 1)
# calculate the odds of having diabetes
odds_chol_categorised <- dm_by_chol_categorised_prop[, "yes"]/dm_by_chol_categorised_prop[, "no"]
# calculate the log odds
logodds_chol_categorised <- log(odds_chol_categorised)
# plot the cholesterol categories found in the sample against the log odds of having diabetes
dotchart(logodds_chol_categorised)
##### BMI
#bmi
height <- g[,"height"]
weight <- g[,"weight"]
height.si <- height*0.0254
weight.si <- weight*0.453592
bmi <- weight.si/height.si^2
bmi_categorised <- ifelse(bmi < 18.5, "underweight",
ifelse(bmi >= 18.5 & bmi <= 25, "normal",
ifelse(bmi > 25 & bmi <= 30, "overweight",
ifelse(bmi > 30, "obese", NA))))
# make sure that it is treated as a factor/categorical variable and ordering the levels within the factor for the table
bmi_categorised <- factor(bmi_categorised, levels = c("underweight", "normal", "overweight","obese"))
# create a cross tabulation of BMI and diabetes status
dm_by_bmi_categorised <- table(bmi_categorised, dm) # not including NA values because there aren't that many
# output the frequencies of diabetes status by BMI
dm_by_bmi_categorised_prop <- prop.table(dm_by_bmi_categorised, margin = 1)
# calculate the odds of having diabetes
odds_bmi_categorised <- dm_by_bmi_categorised_prop[, "yes"]/dm_by_bmi_categorised_prop[, "no"]
# calculate the log odds
logodds_bmi_categorised <- log(odds_bmi_categorised)
# plot the BMI categories found in the sample against the log odds of having diabetes
dotchart(logodds_bmi_categorised)
###### CORRELAÇÃO
cor.test(x=chol,y=hdl,method="pearson")
dim(chol)
dim(hdl)
dim(chol[1])
dim(chol[0])
typeof(chol)
chol
###### CORRELAÇÃO
cor.test(x=chol,y=hdl,method="pearson")
###### CORRELAÇÃO
# define chol as a continuous variable
chol <- g["chol"]
cor.test(x=chol,y=hdl,method="pearson")
###### CORRELAÇÃO
# define chol as a continuous variable
chol <- g[,"chol"]
cor.test(x=chol,y=hdl,method="pearson")
hdl <- g[,"hdl"]
cor.test(x=chol,y=hdl,method="pearson")
table(age_grouped)
table(gender)
table(bmi)
table(bmi_categorised)
m <- glm(dm ~ age_grouped+gender+bmi_categorised,family=binomial(link=logit))
summary(m)
m$coefficients #log odds ratios
exp(m$coefficients) #odds ratios
m <- glm(dm ~ age + gender + bmi, family=binomial (link=logit))
summary(m)
levels(gender)
## How to Run Multiple Logistic Regression in R
gender <- relevel(gender, ref = "female")
m <- glm(dm ~ age + gender + bmi, family=binomial (link=logit))
summary(m)
# calculando intrervalo de confiança para razaão de chance
exp(confint(m))
m$coefficients #log odds ratios
exp(m$coefficients) #odds ratios
## TESTE Running A New Logistic Regression Model
colnames(g)
insurance <- as.factor(g[,"insurance"])
table(insurance)
summary(chol)
#fit model
m <- glm(dm~age+chol+insurance,family = binomial(link = "logit"))
summary(m)
exp(m$coefficients)
exp(confint(m))
# design your logistic regression
full_model <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
# analyse table of deviance
anova(full_model, test = "Chisq")
dim(g)
summary(m)
dm <- as.factor(g[,"dm"])
insurance <- as.factor(g[,"insurance"])# let's say 0=none, 1=gov, 2=private
fh <- as.factor(g[,"fh"]) # 1=FH, 0=no FH
smoking <- as.factor(g[,"smoking"]) # 1,2,3
chol <- g[,'chol']
hdl <- g[,'hdl']
ratio <- g[,'ratio']
location <- as.factor(g[,'location'])
age <- g[,'age']
gender <- as.factor(g[,'gender'])
frame <- as.factor(g[,'frame'])
systolic <- g[,'bp.1s']
diastolic <- g[,'bp.1d']
model <- glm(dm ~ age + bmi + chol + hdl + systolic + diastolic, family = binomial(link = logit))
summary(model)
model <- glm(dm ~ age + bmi + chol + hdl, family = binomial(link = logit))
summary(model)
cor.test(systolic, hdl) # not significant
cor.test(systolic, bmi) # significant
cor.test(systolic, chol) # very significant
cor.test(systolic, age) # extremely significant
# tesatando sem idade, mas com pressões
model <- glm(dm ~  bmi + chol + hdl + systolic + diastolic, family = binomial(link = logit))
summary(model)
# tesatando sem idade, mas com pressões
model <- glm(dm ~  bmi + chol + hdl + systolic, family = binomial(link = logit))
summary(model)
+ diastolic
+ diastolic
# tesatando sem idade, mas com pressões
model <- glm(dm ~  bmi + chol + hdl + systolic + diastolic, family = binomial(link = logit))
summary(model)
model <- glm(dm ~ age + bmi + chol + hdl + systolic + diastolic + gender + location + frame + insurance + smoking, family = binomial(link = logit))
summary(model)
