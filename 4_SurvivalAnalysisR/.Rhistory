summary(m)
getwd()
g <- read.csv(file = "simulated-HF-mort-data-for-GMPH.csv", header=TRUE, sep=',')
dim(g)
names(g)
head(g)
install.packages("survival")
install.packages("ggplot")
library(survival) # this is the cornerstone command for survival analysis in R
library(ggplot2) # newer package that does nice plots
gender <- as.factor(g[,"gender"]) # R calls categorical variables factors
fu_time <- g[,"fu_time"] # continuous variable (numeric)
death <- g[,"death"] # binary variable (numeric)
km_fit <- survfit(Surv(fu_time, death) ~ 1)
plot(km_fit)
summary(km_fit, times = c(1:7,30,60,90*(1:10)))
####Now let’s extend this by splitting the curve by gender:
km_gender_fit <- survfit(Surv(fu_time, death) ~ gender)
plot(km_gender_fit)
# comparando curvas de sobrevivência (logrank test)
survdiff(Surv(fu_time, death) ~ gender, rho=0)
#teste: dicotomizando idade
# categorise BMI by category
age_groups <- ifelse(age < 65, "non-elderly",
ifelse(bmi >= 65, "elderly", NA))
age <- g[,"age"]
#teste: dicotomizando idade
# categorise BMI by category
age_groups <- ifelse(age < 65, "non-elderly",
ifelse(bmi >= 65, "elderly", NA))
#teste: dicotomizando idade
# categorise BMI by category
age_groups <- ifelse(age < 65, "non-elderly",
ifelse(age >= 65, "elderly", NA))
table(age_groups)
km_age_group_fit <- survfit(Surv(fu_time, death) ~ age_groups)
plot(km_age_group_fit)
survdiff(Surv(fu_time, death) ~ age_groups, rho=0)
library(survival)
install.packages("survminer")
library(survminer)
cox <- coxph(Surv(fu_time, death) ~ ethnicgroup, data = g) # take variables straight from g
summary(cox)
ethnicgroup <- factor(g[,"ethnicgroup"]) # can also use “as.factor” rather than “factor”
fu_time <- g[,"fu_time"]
death <- g[,"death"]
cox <- coxph(Surv(fu_time, death) ~ ethnicgroup)
summary(cox)
#assumindo os NAs como uma categoria em si
levels(ethnicgroup)<-c(levels(ethnicgroup),"8") # add level 8 to the factor
ethnicgroup[is.na(ethnicgroup)] <- "8" # Change NA to "None"
cox <- coxph(Surv(fu_time, death) ~ ethnicgroup)
summary(cox)
## explorando variaveis
# Age (assumed to be continuous)
summary(age)
#
# Gender
table(gender, exclude=NULL)
names(g)
head(g)
#
# Prior OPD appointments missed (“prior_dnas”)
prior_dnas <- g[,"prior_dnas"]
summary(prior_dnas)
#
# Ethnic group
table(ethnicgroup, exclude=NULL)
#
# COPD (chronic obstructive pulmonary disease)
copd <- g[,"copd"]
summary(copd)
#
# COPD (chronic obstructive pulmonary disease)
copd <- factor(g[,"copd"])
table(copd, exclude=NULL)
t <- table(copd, exclude=NULL)
addmargins(t) # adds the total (a "sum" column)
round(100*prop.table(t),digits=1) # get %s rounded to 1dp
t <- table(prior_dnas, exclude=NULL)
addmargins(t) # adds the total (a "sum" column)
round(100*prop.table(t),digits=1) # get %s rounded to 1dp
#How to run multiple Cox model in R
cox <- coxph(Surv(fu_time, death) ~ age + gender + copd + prior_dnas + ethnicgroup)
library(survival)
library(survminer)
library(ggplot2) # newer package that does nice plots
#How to run multiple Cox model in R
cox <- coxph(Surv(fu_time, death) ~ age + gender + copd + prior_dnas + ethnicgroup)
summary(cox)
levels(gender)
head(g[,"quintile"])
quintile <- factor(g[,"quintile"])
cox <- coxph(Surv(fu_time, death) ~ age + gender + copd + quintile + ethnicgroup)
summary(cox)
#problema está no quintile
table(quintile, exclude=NULL)
t <- table(quintile,death)
t
round(100*prop.table(t,1),digits=1)
#1. trocando a categoria de referencia:
quintile <- relevel(quintile, ref = "1") # make the reference category quintile=1
cox <- coxph(Surv(fu_time, death) ~ age + gender + copd + quintile + ethnicgroup)
summary(cox)
#2. trocando a categoria de referencia:
quintile_5groups <- g[,"quintile"] # best start again with the original data set, not from the existing object called “quintile”
quintile_5groups[quintile_5groups==0] <- 5 # This picks the individuals with quintile=0 (note the double equals sign) and sets them to 5
quintile_5groups <- factor(quintile_5groups) # lastly, tell R that this is a categorical variable and not a continuous one
table(quintile_5groups,exclude=NULL)
cox <- coxph(Surv(fu_time, death) ~ age + gender + copd + quintile_5groups + ethnicgroup)
summary(cox)
#2. sem a categoria 0:
quintile_withoutZero <- g[,"quintile"] # best start again with the original data set, not from the existing object called “quintile”
#2. sem a categoria 0:
quintile_withoutZero <- g[,"quintile"] # best start again with the original data set, not from the existing object called “quintile”
quintile_withoutZero[quintile_withoutZero==0] <- "NA" # This picks the individuals with quintile=0 (note the double equals sign) and sets them to 5
quintile_withoutZero <- factor(quintile_withoutZero) # lastly, tell R that this is a categorical variable and not a continuous one
table(quintile_withoutZero,exclude=NULL)
#2. sem a categoria 0:
quintile_withoutZero <- g[,"quintile"] # best start again with the original data set, not from the existing object called “quintile”
quintile_withoutZero[quintile_withoutZero==0] <- NA # This picks the individuals with quintile=0 (note the double equals sign) and sets them to 5
quintile_withoutZero <- factor(quintile_withoutZero) # lastly, tell R that this is a categorical variable and not a continuous one
table(quintile_withoutZero,exclude=NULL)
cox <- coxph(Surv(fu_time, death) ~ age + gender + copd + quintile_withoutZero + ethnicgroup)
summary(cox)
#2. sem a coluna quantile:
cox <- coxph(Surv(fu_time, death) ~ age + gender + copd + ethnicgroup)
summary(cox)
# testando para gênero
fit <- coxph(Surv(fu_time, death) ~ gender) # fit the desired model
temp <- cox.zph(fit)# apply the cox.zph function to the desired model
print(temp) # display the results
plot(temp) # plot the curves
km_fit <- survfit(Surv(fu_time, death) ~ gender)
autoplot(km_fit)
install.packages("ggplot")
library(ggplot2) # newer package that does nice plots
autoplot(km_fit)
plot(km_fit, xlab = "time", ylab = "Survival probability") # label the axes
# Specifying the argument type = “dfbeta” plots the estimated changes in the regression coefficients
# on deleting each observation (patient) in turn:
res.cox <- coxph(Surv(fu_time, death) ~ age)
ggcoxdiagnostics(res.cox, type = "dfbeta",
linear.predictions = FALSE, ggtheme = theme_bw())
ggcoxdiagnostics(res.cox, type = "dfbeta", linear.predictions = FALSE, ggtheme = theme_bw())
res.cox <- coxph(Surv(fu_time, death) ~ age)
ggcoxdiagnostics(res.cox, type = "deviance", linear.predictions = FALSE, ggtheme = theme_bw())
ggcoxdiagnostics(res.cox, type = "deviance", linear.predictions = FALSE)
dev.off()
ggcoxdiagnostics(res.cox, type = "dfbeta", linear.predictions = FALSE, ggtheme = theme_bw())
res.cox <- coxph(Surv(fu_time, death) ~ age)
ggcoxdiagnostics(res.cox, type = "deviance",
linear.predictions = FALSE, ggtheme = theme_bw())
# Another issue is whether any continuous variables that you assume to have a linear relation with the outcome
# actually do have a linear relation. If you fit age as a single term in the model, then that’s what you’re assuming
# . The martingale residual is used to test this assumption:
ggcoxfunctional(Surv(fu_time, death) ~ age + log(age) + sqrt(age))
# Another issue is whether any continuous variables that you assume to have a linear relation with the outcome
# actually do have a linear relation. If you fit age as a single term in the model, then that’s what you’re assuming
# . The martingale residual is used to test this assumption:
ggcoxfunctional(Surv(fu_time, death) ~ age + log(age) + sqrt(age))
# Another issue is whether any continuous variables that you assume to have a linear relation with the outcome
# actually do have a linear relation. If you fit age as a single term in the model, then that’s what you’re assuming
# . The martingale residual is used to test this assumption:
ggcoxfunctional(coxph(Surv(fu_time, death) ~ age + log(age) + sqrt(age)))
# Another issue is whether any continuous variables that you assume to have a linear relation with the outcome
# actually do have a linear relation. If you fit age as a single term in the model, then that’s what you’re assuming
# . The martingale residual is used to test this assumption:
ggcoxfunctional(Surv(fu_time, death) ~ age + log(age) + sqrt(age))
# Another issue is whether any continuous variables that you assume to have a linear relation with the outcome
# actually do have a linear relation. If you fit age as a single term in the model, then that’s what you’re assuming
# . The martingale residual is used to test this assumption:
ggcoxfunctional(Surv(fu_time, death) ~ age + log(age) + sqrt(age), data = g)
####
##Testing the proportionality assumption with another variable - COPD
fit <- coxph(Surv(fu_time, death) ~ copd) # fit the desired model
temp <- cox.zph(fit)# apply the cox.zph function to the desired model
print(temp) # display the results
plot(temp) # plot the curves
km_fit <- survfit(Surv(fu_time, death) ~ copd)
autoplot(km_fit)
#autoplot(km_fit)
plot(km_fit, xlab = "time", ylab = "Survival probability") # label the axes
######## O QUE FAZER SE PROPORCIONALIDADE NÃO FOR ATENDIDA?
#pode ser que exista uma influencia estatísticamente relevante do tempo na variável predito
#uma possível solução é incluir um termo que represente esse fator temporal:
#Incluindo termos
fit <- coxph(Surv(fu_time, death) ~ gender + tt(gender)) # "tt" is the time-transform function
summary(fit)
